#!/bin/bash
BASEDIR="/opt/webhost/wdrsyncbk"
CONFDIR=$BASEDIR"/conf"
LOGDIR=$BASEDIR"/log"

ALERT_HOUR="09"
CONCURRENCY=4

FILTERS="`find $CONFDIR -mindepth 1 -maxdepth 1 -type d | sed 's|'$CONFDIR/'||' | xargs`"
FILTERS_REGEX="^(all|`echo $FILTERS | tr ' ' '|'`)$"

if [ ! -d "$LOGDIR" ]; then mkdir -p $LOGDIR; fi
TIMELOG=$LOGDIR"/backup.time"

showUsage() {
cat << EOF

usage: $0 [options] [server]

OPTIONS:
   -h      Show this message.
   -t      Enables TEST mode (no commands are executed).
   -n      Enables NRPE mode (only checks for errors in log files).
   -d      Enables DEBUG mode (print verbose messages)
   -s      Create snapshots for configurations.
   -c      Specify concurrency (Defaults to 4, valid range 1-8)
   -f      Filter configurations.
           Available filters: $FILTERS_REGEX

   Examples:
     - Run all configurations.
         $0 -f all

     - Check for errors in log files.
         $0 -d -n

     - Run specific configuration, which can be from any folder.
         $0 webdrive-wd2

     - Run all configurations within customer folder.
         $0 -f all-cust

     - Run specific configuration, which can only be within specified folder.
         $0 -f all-wd webdrive-stats

EOF
}

if [ $# -eq 0 ]; then
	showUsage && exit 1
fi

ARG=""
while getopts "tndsc:f:h" OPTION
do
	case $OPTION in
		t)
		TEST=1
		ARG="$ARG -t"
		;;
		n)
		NRPE=1
		ARG="$ARG -n"
		;;
		d)
		ARG="$ARG -d"
		DEBUG=1
		;;
		s)
		ARG="$ARG -s"
		SNAPSHOT=1
		;;
		c)
		if [[ $OPTARG =~ ^[1-8]$ ]]; then
			CONCURRENCY=$OPTARG
			ARG="$ARG -c $OPTARG"
		else
			echo "Error: Invalid concurrency."
			showUsage && exit 1
		fi
		;;
		f)
		if [[ "$OPTARG" = "all" || $OPTARG =~ $FILTERS_REGEX ]]; then
			MFILTER=$OPTARG
			ARG="$ARG -f $OPTARG"
		else
			echo "Error: Invalid filter."
			showUsage && exit 1
		fi
		;;
		*)
		showUsage && exit
		;;
	esac
done

shift `expr $OPTIND - 1`
CONFIGS="$*"

ARG="$ARG $CONFIGS"
if [ "$DEBUG" ]; then echo "DEBUG: Script execution called with arguments: $0 $ARG" ; fi

# Include some data
. $BASEDIR"/bin/backup-server.lib"

if [ "$NRPE" ]; then
	if [ "$DEBUG" ]; then echo "DEBUG: NRPE mode specified. Only checking for errors." ; fi

	RETVAL=0
	OUTPUT=""

	ERROR_IGNORE="`echo "$ERROR_IGNORE_GLOBAL" | grep -v ^$ | tr "\n" "|" | sed 's/^|//' | sed 's/|$//'`"

	for FILE in `find $LOGDIR -type f -name "*.err" ! -size 0 | sort`; do
		JOB=`echo $FILE | rev | cut -d / -f 1 | rev | sed 's/\.err$//'`
	        if [ "$ERROR_IGNORE" = "" ]; then
			ERROR="`cat $FILE | grep -v '^\W'`"
		else
			ERROR="`cat $FILE | grep -v '^\W' | egrep -v "$ERROR_IGNORE"`"
		fi
		if [ ! "$ERROR" = "" ]; then
			if [ "`date +%H`" = "$ALERT_HOUR" ]; then
				RETVAL=2
			else
				RETVAL=1
			fi

			if [ "$DEBUG" ]; then
				OUTPUT="$OUTPUT \n#### $JOB #### \n $ERROR"
			else
				OUTPUT="$OUTPUT $JOB"
			fi
		fi
	done

	OLDFILES="`find $LOGDIR -type f -name '*.err' ! -size 0 -mtime +1`"
	if [ "$OLDFILES" ]; then
		if [ "$RETVAL" = 0 ]; then
			RETVAL=1
		fi
		OLDFILES="`find $LOGDIR -type f -name '*.err' ! -size 0 -mtime +3`"
		if [ "$OLDFILES" ]; then
			OUTPUT="$OUTPUT CRITICAL: Log files older than 3 days found."
		else
			OUTPUT="$OUTPUT WARNING: Log files older than 24 hours found."
		fi
	fi

	if [ "$RETVAL" = "0" ]; then
		echo "OK"
	else
		echo -e "RSYNC ERRORS: $OUTPUT"
	fi
	exit $RETVAL
fi

echo "`date` : Starting script execution. Arguments: $0 $ARG" >> $TIMELOG

if [ "$MFILTER" = "" ]; then
	if [ "$DEBUG" ]; then
		echo "DEBUG: No filter specified. Running backup for all folders."
	fi
	MFILTER="all"
fi

if [ "$MFILTER" = "all" ]; then
	for FILTER in $FILTERS; do
		if [ "$DEBUG" ]; then
			echo "DEBUG: Spawning new script for filter: $FILTER"
			$0 -d -f $FILTER $CONFIGS
		else
			$0 -f $FILTER $CONFIGS
		fi
	done
else
	start_time_mfilter=`date +%s`

	if [ "$CONFIGS" = "" ]; then
		if [ "$DEBUG" ]; then echo "DEBUG: No configuration given. Running for all configurations in folder: $MFILTER."; fi
		RUNCONFIG="`find ${CONFDIR}/${MFILTER} -type f -name '*.conf' | sort`"
	else
		for CONFIG in $CONFIGS; do
			if [ "$DEBUG" ]; then echo "DEBUG: Finding subset of configurations (*${CONFIG}*) in folder: $MFILTER"; fi
			RUNCONFIG="$RUNCONFIG `find ${CONFDIR}/${MFILTER} -type f -name \"*${CONFIG}*.conf\" | sort`"
		done
	fi

	if [ `echo "${RUNCONFIG}" | wc -w` -eq 0 ]; then
		echo "DEBUG: No configuration for subset (${CONFIGS}) found within ${MFILTER}."
	else
		if [ "$DEBUG" ]; then echo "DEBUG: Exporting variables to be used in the script calls to follow." ; fi
		export BASEDIR
		export CONFDIR
		export MFILTER
		export LOGDIR
		export TIMELOG
		export TEST

		if [ "$DEBUG" ]; then echo "DEBUG: Requested configurations: `echo ${RUNCONFIG} | xargs`" ; fi
		if [ "$SNAPSHOT" ]; then
			if [ "$DEBUG" ]; then echo "DEBUG: Iterating through all configurations, and retrieving BACKUP_HOME variables, so we can create snapshots" ; fi
			for CONFIG in $RUNCONFIG; do
				if [ "$DEBUG" ]; then echo "DEBUG: Retrieving BACKUP_HOME from $CONFIG" ; fi

				BACKUP_HOME=""
				. $CONFIG

				if [ ! "$BACKUP_HOME" ]; then
					if [ "$DEBUG" ]; then echo "DEBUG: BACKUP_HOME from $CONFIG was empty. Using BACKUP_HOME_DEFAULT" ; fi
					BACKUP_HOME=$BACKUP_HOME_DEFAULT
				fi
				RUNSNAP="$RUNSNAP $BACKUP_HOME"
			done
			RUNSNAP="`echo $RUNSNAP | xargs -n1 | sort | uniq | xargs`"

			if [ "$DEBUG" ]; then echo "DEBUG: Creating snapshots for: $RUNSNAP" ; fi
			if [ "$TEST" ]; then
				echo "TEST: SNAPSHOT creation was requested, but skipped due to test mode being enabled."
			else
				echo $RUNSNAP | xargs -n1 /opt/webhost/bin/snapshot-create
			fi
		else
			if [ "$DEBUG" ]; then echo "DEBUG: Snapshot option not selected. Skip creating snapshots." ; fi
		fi

		if [ "$DEBUG" ]; then echo "DEBUG: Spawning backup script for requested configurations" ; fi
		echo $RUNCONFIG | xargs -n1 -P $CONCURRENCY $BASEDIR"/bin/backup-server.sh"
	fi

	end_time_mfilter=`date +%s`
	time_sec=`echo $start_time_mfilter $end_time_mfilter | awk '{print ($2-$1)}'`
	echo "`date` : Finished script execution. Completed in $time_sec seconds - ${MFILTER}" >> $TIMELOG

fi
