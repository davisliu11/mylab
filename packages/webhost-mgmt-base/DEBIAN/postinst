#!/bin/bash

# Populate asset name, if not already present.
AFILTER="[A-Za-z0-9]+-[A-Za-z0-9_-]+$"

if [ ! -f "/opt/webhost/asset" ]; then
	while [[ ! $ASSET =~ $AFILTER ]]; do
		if [ ! "$ASSET" = "" ]; then
			echo "Asset name did not match regular expression: "$AFILTER
		fi
		read -p "Please enter the asset name ('customer-machine'): " ASSET
	done

	mkdir -p /opt/webhost 2>/dev/null
	echo -e "$ASSET" > /opt/webhost/asset
	chattr +i /opt/webhost/asset 
fi

# Schedule apt-check
if [ "`crontab -l | grep -c apt-check`" = "0" ]; then
	(echo "30 0 * * * /opt/webhost/bin/apt-check  > /dev/null 2>&1"; crontab -l) | crontab -
fi

# Add additional nagios commands, if nagios is present
if [ -f "/etc/nagios/nrpe.cfg" ]; then
	if [ "`grep -c check_fs /etc/nagios/nrpe.cfg`" = "0" ]; then
		sed -i '/^command\[check_load/acommand[check_fs]=/usr/bin/sudo /opt/webhost/nrpe/check_fs -s\' /etc/nagios/nrpe.cfg
	fi

	if [  "`egrep '^command\[check_disk' /etc/nagios/nrpe.cfg | egrep -c ' -W | -K '`" = "0"   ]  ; then
		sed -i '/^command\[check_disk/ s/-p/-W 10% -K 3% -p/' /etc/nagios/nrpe.cfg
		/etc/init.d/nagios-nrpe-server reload
	fi
fi

# Ensure sudo configuration includes are chmod 0440
chmod 0440 /etc/sudoers.d/*
chmod 0440 /opt/webhost/sudoers.fallback
chattr +i /opt/webhost/sudoers.fallback

# Insert includedir directive into sudo
if [ "`grep -c '#includedir' /etc/sudoers`" = "0" ]; then
	echo "#includedir /etc/sudoers.d" >> /etc/sudoers
fi

# Determine sudo version, and put configuration includes into main file, due to lack of include support in sudo<1.7.2.
sudoversion="`dpkg-query -W -f='${Version}\n' sudo`"
result="`dpkg --compare-versions $sudoversion gt 1.7.2`"
if [ $? -ne 0 ]; then
	# remove anything from main file, between 'webhost-mgmt-base' and '/webhost-mgmt-base'
	sed -i '/WEBHOST-MGMT-BASE/,/\/WEBHOST-MGMT-BASE/d' /etc/sudoers

	# foreach file in sudoers.d, echo content into main file.
	for FILE in `find /etc/sudoers.d/ -type f`; do
		if [ "`grep -c WEBHOST-MGMT-BASE $FILE`" -gt 0 ]; then
			cat $FILE >> /etc/sudoers
		fi
	done
fi

# Ensure sudo has the correct syntax, otherwise move main file out of the way, and copy fallback
result="`visudo -c 2>&1`"
if [ $? -ne 0 ]; then
	mv -f /etc/sudoers /etc/sudoers.ori
	cp -f /opt/webhost/sudoers.fallback /etc/sudoers
	chown root.root /etc/sudoers
	chmod 0440 /etc/sudoers

	# alert that sudo has an incorrect configuration
	echo -e "Sudo configuration check error. Triggered switch to fallback configuration.

Output: $result

Main file content: 
`cat /etc/sudoers.ori`" | mail -s "WEBHOST-MGMT-BASE: Sudo configuration error on `cat /opt/webhost/asset`" serverwatch@webdrive.co.nz
fi

# Add timestamp and increase history size for root, if not already set.
if [ -f "/root/.bashrc" ]; then
	if [ "`grep -c HISTSIZE /root/.bashrc`" = "0" ]; then
		echo "HISTSIZE=10000" >> /root/.bashrc
	fi
	if [ "`grep -c HISTFILESIZE /root/.bashrc`" = "0" ]; then
		echo "HISTFILESIZE=10000" >> /root/.bashrc
	fi
	if [ "`grep -c HISTTIMEFORMAT /root/.bashrc`" = "0" ]; then
		echo "HISTTIMEFORMAT='%F %T '" >> /root/.bashrc
	fi
fi

# Ensure correct permissions for webdrive home folder
if [ -f "/home/webdrive/.mgmt" ]; then
	chattr -i /home/webdrive/.mgmt
fi
chown webdrive.webdrive -R /home/webdrive

# Setup a password for webdrive user
if [ ! -f "/home/webdrive/.mgmt" ]; then
	PASS_WEBDRIVE="`/usr/bin/apg -d -n1 -m10 -x10 -a1 -M NCL`"
	echo "webdrive:$PASS_WEBDRIVE" | /usr/sbin/chpasswd
	echo "$PASS_WEBDRIVE" > /home/webdrive/.passwd
	chown webdrive.webdrive /home/webdrive/.passwd
	chmod 600 /home/webdrive/.passwd
	chmod 700 /home/webdrive
	# Ensure this only happens once
	touch /home/webdrive/.mgmt
	chown webdrive.webdrive /home/webdrive/.mgmt
	chattr +i /home/webdrive/.mgmt
else
	chattr +i /home/webdrive/.mgmt
fi

### Remove previous webdrive staff keys from root
if [ -f "/root/.ssh/authorized_keys" ]; then
	# beneckedouglas
	sed -i '/doug/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/QrTa5moxL2IN6PhyehDa8TQN9AMaTOodbhuJiEHQ38Y17D/d' /root/.ssh/authorized_keys
	# cairnsjames
	sed -i '/james/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/hRi0AVhSgqwLCmvhOraf2xYSHqyzgG31v+WA9uSwTL15zX/d' /root/.ssh/authorized_keys
	# cutlerandrew
	# daviesscott
	sed -i '/davies/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/ZAQNoMSPN6YfGbB70cpmIfSFq0hFIVle46oYSWTIHeHESR/d' /root/.ssh/authorized_keys
	# dewitpieter
	sed -i '/pieter/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/DFyyydBq9o1xMRRbTJn5K1x3RkrOyomNxbcvRkStk7U9W7/d' /root/.ssh/authorized_keys
	# gapinskimarcin
	sed -i '/martin/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/marcin/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/5rouimQNPHX2qtaw8E3Kq6gyyDKci48TdHhh8x5VxI354h/d' /root/.ssh/authorized_keys
	# garrettdavid
	sed -i '/david/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/MJRaY9xJUsDkmigROC4187OfbFcnlEpeyZY3LGYZOYhHR1/d' /root/.ssh/authorized_keys
	# goresteve
	# grossthomas
	sed -i '/thomas/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/tom/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/0fvTv+RckCCSWsEU3nMaUE1Mpa2pWjeDHvCxYBE7TwwqLm/d' /root/.ssh/authorized_keys
	# hairmatt
	sed -i '/matt/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/alZvqOOD3PVn9YsOGda4yyFZSqhfSXPH6soQ3BRpdMj2cL/d' /root/.ssh/authorized_keys
	# hoggsteve
	#sed -i '/steve/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	#sed -i '/W3JvdaZ6GjDZ2ErDNt9+TaEsxiQ0oYErod3wksopoCXHuN/d' /root/.ssh/authorized_keys
	# holmesandrew
	sed -i '/andrew/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/CP9XuZzyPF8nhdRkbDJlVUHFD3wj537J6cFiLJ3EfPOXoC/d' /root/.ssh/authorized_keys
	# iranirushad
	sed -i '/rushad/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/kc0T8avG2s8Ci6jxu7pHlrw1x34jDkNmks1LkgBnNiMbJ6/d' /root/.ssh/authorized_keys
	# jagermichael
	sed -i '/michael/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/VwRPYMstiBEuD0G0LHaXsspu3jnrcsF4c7DSbvr2x+HYy3/d' /root/.ssh/authorized_keys
	# kingtarei
	sed -i '/tarei/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/PVR7hKcU7y38llSbD3WQJKiqE0wDRaPPH8CPKmkQArAJxWF/d' /root/.ssh/authorized_keys
	# nahjames
	sed -i '/nah/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/uSMkK1hobtuigcVee6iWslfEx8DTxACQxPVQVNYnBRSMlML/d' /root/.ssh/authorized_keys
	# netoaristoteles
	#sed -i '/neto/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	#sed -i '/NdsNBfGDFJXAz6YHgF7E0BrakwOKxyJTZtQ24zQvaRuNp7/d' /root/.ssh/authorized_keys
	# rathnayakekesara
	sed -i '/kesara/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys

	# ranahemal
	sed -i '/hemal/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/yru3ZjywfrxolxK953ms6DZmQgBqiczxrvm4syFLfe5JoI/d' /root/.ssh/authorized_keys
	# reevesdave
	sed -i '/dave/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/FNvDU7lh3V5MUY8J4RyX5Aki4ft0JuVzm6pWEhZzDuiBUc/d' /root/.ssh/authorized_keys
	# salehisohail
	sed -i '/sohail/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	set -i '/SVJ4uniT9SL77omuXdL22UBywrpMfG0zE6NdntdqkjiQRs/d' /root/.ssh/authorized_keys
	# sarmanilim
	sed -i '/nilim/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/MVZwjrm1mLTvxGuyGRqh5DwxSQVz0tzgq5e9v3xzJckiU+/d' /root/.ssh/authorized_keys
	# scarisbrickbrad
	sed -i '/brad/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/scaris/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/3BJZHonYYmX1aDrZjtFxmXrKzF8G+UDOFpY1G6cmvFmiNM/d' /root/.ssh/authorized_keys
	# shawben
	sed -i '/ben/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/C1yc2EAAAABJQAAAIBWjYFGhsVPDLmD8GZFCukliMc7zbG/d' /root/.ssh/authorized_keys
	# stevensnick
	sed -i '/nick/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/ZdyEVKHW2l1C5YpXnPRrWVNoUbOhSG4B5qJV1qcPhCVZcq/d' /root/.ssh/authorized_keys
	# valleyrobert
	sed -i '/robert/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/yi0pVNRwjZPMxiKazz0AwCZYk7EBbt6vESIM8FT1uL0OsI/d' /root/.ssh/authorized_keys
	# vandesteenmarcel
	sed -i '/marcel/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/q9nPudWvAl7gkxilmkX6IeNhIOWLkPfltcavMcWp4I8knF/d' /root/.ssh/authorized_keys
	# whitescott
	sed -i '/scott/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/rb8NIMjGqrI3KeMr6wqut6r3kXb2hoTcVEP0CA5g5KDAbp/d' /root/.ssh/authorized_keys
	# parkjune
	sed -i '/june/I{/^ssh-[dr]sa/!d;}' /root/.ssh/authorized_keys
	sed -i '/va3gcmTL9aP4i35s2fsWA5oHAVaTIRC6TM0LU9irOidpUz/d' /root/.ssh/authorized_keys

	# Remove whitespaces / webdrive
	sed -i '/WebDive/Id' /root/.ssh/authorized_keys
	sed -i '/WebDrive/Id' /root/.ssh/authorized_keys
	sed -i '/Web Drive/Id' /root/.ssh/authorized_keys
	sed -i '/for management/Id' /root/.ssh/authorized_keys
	sed -i '/^$/d' /root/.ssh/authorized_keys
fi

# Set the SCSI disk timeout to 180 seconds if we're running on VMware disks
if grep -q VMware /proc/scsi/scsi; then 
	for disk in `find /sys/block/ -name sd*`; do	
		echo 180 > ${disk}/device/timeout
	done
fi
